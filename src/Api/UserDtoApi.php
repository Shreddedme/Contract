<?php
/**
 * UserDtoApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Bankiru\PetClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hello API Platform
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bankiru\PetClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bankiru\PetClient\ApiException;
use Bankiru\PetClient\Configuration;
use Bankiru\PetClient\HeaderSelector;
use Bankiru\PetClient\ObjectSerializer;

/**
 * UserDtoApi Class Doc Comment
 *
 * @category Class
 * @package  Bankiru\PetClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserDtoApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiUserIdDelete' => [
            'application/json',
        ],
        'apiUserIdGet' => [
            'application/json',
        ],
        'apiUsercreatePost' => [
            'application/ld+json',
            'application/json',
            'text/html',
        ],
        'apiUsersGetCollection' => [
            'application/json',
        ],
        'apiUserupdatePut' => [
            'application/ld+json',
            'application/json',
            'text/html',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiUserIdDelete
     *
     * Removes the UserDto resource.
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserIdDelete'] to see the possible values for this operation
     *
     * @throws \Bankiru\PetClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiUserIdDelete($id, string $contentType = self::contentTypes['apiUserIdDelete'][0])
    {
        $this->apiUserIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiUserIdDeleteWithHttpInfo
     *
     * Removes the UserDto resource.
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserIdDelete'] to see the possible values for this operation
     *
     * @throws \Bankiru\PetClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiUserIdDeleteWithHttpInfo($id, string $contentType = self::contentTypes['apiUserIdDelete'][0])
    {
        $request = $this->apiUserIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiUserIdDeleteAsync
     *
     * Removes the UserDto resource.
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUserIdDeleteAsync($id, string $contentType = self::contentTypes['apiUserIdDelete'][0])
    {
        return $this->apiUserIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiUserIdDeleteAsyncWithHttpInfo
     *
     * Removes the UserDto resource.
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUserIdDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiUserIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiUserIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiUserIdDelete'
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiUserIdDeleteRequest($id, string $contentType = self::contentTypes['apiUserIdDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiUserIdDelete'
            );
        }


        $resourcePath = '/api/v2/user/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiUserIdGet
     *
     * Retrieves a UserDto resource.
     *
     * @param  string $id UserDto identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserIdGet'] to see the possible values for this operation
     *
     * @throws \Bankiru\PetClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bankiru\PetClient\Model\UserDtoJsonldRead
     */
    public function apiUserIdGet($id, string $contentType = self::contentTypes['apiUserIdGet'][0])
    {
        list($response) = $this->apiUserIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiUserIdGetWithHttpInfo
     *
     * Retrieves a UserDto resource.
     *
     * @param  string $id UserDto identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserIdGet'] to see the possible values for this operation
     *
     * @throws \Bankiru\PetClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bankiru\PetClient\Model\UserDtoJsonldRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiUserIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiUserIdGet'][0])
    {
        $request = $this->apiUserIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bankiru\PetClient\Model\UserDtoJsonldRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bankiru\PetClient\Model\UserDtoJsonldRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bankiru\PetClient\Model\UserDtoJsonldRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bankiru\PetClient\Model\UserDtoJsonldRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bankiru\PetClient\Model\UserDtoJsonldRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiUserIdGetAsync
     *
     * Retrieves a UserDto resource.
     *
     * @param  string $id UserDto identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUserIdGetAsync($id, string $contentType = self::contentTypes['apiUserIdGet'][0])
    {
        return $this->apiUserIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiUserIdGetAsyncWithHttpInfo
     *
     * Retrieves a UserDto resource.
     *
     * @param  string $id UserDto identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUserIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiUserIdGet'][0])
    {
        $returnType = '\Bankiru\PetClient\Model\UserDtoJsonldRead';
        $request = $this->apiUserIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiUserIdGet'
     *
     * @param  string $id UserDto identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiUserIdGetRequest($id, string $contentType = self::contentTypes['apiUserIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiUserIdGet'
            );
        }


        $resourcePath = '/api/v2/user/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiUsercreatePost
     *
     * Creates a UserDto resource.
     *
     * @param  \Bankiru\PetClient\Model\UserDtoJsonldWrite $userDtoJsonldWrite The new UserDto resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsercreatePost'] to see the possible values for this operation
     *
     * @throws \Bankiru\PetClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bankiru\PetClient\Model\UserDtoJsonldRead
     */
    public function apiUsercreatePost($userDtoJsonldWrite, string $contentType = self::contentTypes['apiUsercreatePost'][0])
    {
        list($response) = $this->apiUsercreatePostWithHttpInfo($userDtoJsonldWrite, $contentType);
        return $response;
    }

    /**
     * Operation apiUsercreatePostWithHttpInfo
     *
     * Creates a UserDto resource.
     *
     * @param  \Bankiru\PetClient\Model\UserDtoJsonldWrite $userDtoJsonldWrite The new UserDto resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsercreatePost'] to see the possible values for this operation
     *
     * @throws \Bankiru\PetClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bankiru\PetClient\Model\UserDtoJsonldRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiUsercreatePostWithHttpInfo($userDtoJsonldWrite, string $contentType = self::contentTypes['apiUsercreatePost'][0])
    {
        $request = $this->apiUsercreatePostRequest($userDtoJsonldWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Bankiru\PetClient\Model\UserDtoJsonldRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bankiru\PetClient\Model\UserDtoJsonldRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bankiru\PetClient\Model\UserDtoJsonldRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bankiru\PetClient\Model\UserDtoJsonldRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bankiru\PetClient\Model\UserDtoJsonldRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiUsercreatePostAsync
     *
     * Creates a UserDto resource.
     *
     * @param  \Bankiru\PetClient\Model\UserDtoJsonldWrite $userDtoJsonldWrite The new UserDto resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsercreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsercreatePostAsync($userDtoJsonldWrite, string $contentType = self::contentTypes['apiUsercreatePost'][0])
    {
        return $this->apiUsercreatePostAsyncWithHttpInfo($userDtoJsonldWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiUsercreatePostAsyncWithHttpInfo
     *
     * Creates a UserDto resource.
     *
     * @param  \Bankiru\PetClient\Model\UserDtoJsonldWrite $userDtoJsonldWrite The new UserDto resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsercreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsercreatePostAsyncWithHttpInfo($userDtoJsonldWrite, string $contentType = self::contentTypes['apiUsercreatePost'][0])
    {
        $returnType = '\Bankiru\PetClient\Model\UserDtoJsonldRead';
        $request = $this->apiUsercreatePostRequest($userDtoJsonldWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiUsercreatePost'
     *
     * @param  \Bankiru\PetClient\Model\UserDtoJsonldWrite $userDtoJsonldWrite The new UserDto resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsercreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiUsercreatePostRequest($userDtoJsonldWrite, string $contentType = self::contentTypes['apiUsercreatePost'][0])
    {

        // verify the required parameter 'userDtoJsonldWrite' is set
        if ($userDtoJsonldWrite === null || (is_array($userDtoJsonldWrite) && count($userDtoJsonldWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userDtoJsonldWrite when calling apiUsercreatePost'
            );
        }


        $resourcePath = '/api/v2/user/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userDtoJsonldWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userDtoJsonldWrite));
            } else {
                $httpBody = $userDtoJsonldWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiUsersGetCollection
     *
     * Retrieves the collection of UserDto resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $itemsPerPage The number of items per page (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersGetCollection'] to see the possible values for this operation
     *
     * @throws \Bankiru\PetClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bankiru\PetClient\Model\ApiUsersGetCollection200Response
     */
    public function apiUsersGetCollection($page = 1, $itemsPerPage = 10, string $contentType = self::contentTypes['apiUsersGetCollection'][0])
    {
        list($response) = $this->apiUsersGetCollectionWithHttpInfo($page, $itemsPerPage, $contentType);
        return $response;
    }

    /**
     * Operation apiUsersGetCollectionWithHttpInfo
     *
     * Retrieves the collection of UserDto resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $itemsPerPage The number of items per page (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersGetCollection'] to see the possible values for this operation
     *
     * @throws \Bankiru\PetClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bankiru\PetClient\Model\ApiUsersGetCollection200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiUsersGetCollectionWithHttpInfo($page = 1, $itemsPerPage = 10, string $contentType = self::contentTypes['apiUsersGetCollection'][0])
    {
        $request = $this->apiUsersGetCollectionRequest($page, $itemsPerPage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bankiru\PetClient\Model\ApiUsersGetCollection200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bankiru\PetClient\Model\ApiUsersGetCollection200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bankiru\PetClient\Model\ApiUsersGetCollection200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bankiru\PetClient\Model\ApiUsersGetCollection200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bankiru\PetClient\Model\ApiUsersGetCollection200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiUsersGetCollectionAsync
     *
     * Retrieves the collection of UserDto resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $itemsPerPage The number of items per page (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersGetCollectionAsync($page = 1, $itemsPerPage = 10, string $contentType = self::contentTypes['apiUsersGetCollection'][0])
    {
        return $this->apiUsersGetCollectionAsyncWithHttpInfo($page, $itemsPerPage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiUsersGetCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of UserDto resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $itemsPerPage The number of items per page (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUsersGetCollectionAsyncWithHttpInfo($page = 1, $itemsPerPage = 10, string $contentType = self::contentTypes['apiUsersGetCollection'][0])
    {
        $returnType = '\Bankiru\PetClient\Model\ApiUsersGetCollection200Response';
        $request = $this->apiUsersGetCollectionRequest($page, $itemsPerPage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiUsersGetCollection'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $itemsPerPage The number of items per page (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUsersGetCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiUsersGetCollectionRequest($page = 1, $itemsPerPage = 10, string $contentType = self::contentTypes['apiUsersGetCollection'][0])
    {


        if ($itemsPerPage !== null && $itemsPerPage < 0) {
            throw new \InvalidArgumentException('invalid value for "$itemsPerPage" when calling UserDtoApi.apiUsersGetCollection, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/api/v2/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiUserupdatePut
     *
     * Replaces the UserDto resource.
     *
     * @param  \Bankiru\PetClient\Model\UserJsonld $userJsonld The updated UserDto resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserupdatePut'] to see the possible values for this operation
     *
     * @throws \Bankiru\PetClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bankiru\PetClient\Model\UserJsonld
     */
    public function apiUserupdatePut($userJsonld, string $contentType = self::contentTypes['apiUserupdatePut'][0])
    {
        list($response) = $this->apiUserupdatePutWithHttpInfo($userJsonld, $contentType);
        return $response;
    }

    /**
     * Operation apiUserupdatePutWithHttpInfo
     *
     * Replaces the UserDto resource.
     *
     * @param  \Bankiru\PetClient\Model\UserJsonld $userJsonld The updated UserDto resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserupdatePut'] to see the possible values for this operation
     *
     * @throws \Bankiru\PetClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bankiru\PetClient\Model\UserJsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiUserupdatePutWithHttpInfo($userJsonld, string $contentType = self::contentTypes['apiUserupdatePut'][0])
    {
        $request = $this->apiUserupdatePutRequest($userJsonld, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bankiru\PetClient\Model\UserJsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bankiru\PetClient\Model\UserJsonld' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bankiru\PetClient\Model\UserJsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bankiru\PetClient\Model\UserJsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bankiru\PetClient\Model\UserJsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiUserupdatePutAsync
     *
     * Replaces the UserDto resource.
     *
     * @param  \Bankiru\PetClient\Model\UserJsonld $userJsonld The updated UserDto resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserupdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUserupdatePutAsync($userJsonld, string $contentType = self::contentTypes['apiUserupdatePut'][0])
    {
        return $this->apiUserupdatePutAsyncWithHttpInfo($userJsonld, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiUserupdatePutAsyncWithHttpInfo
     *
     * Replaces the UserDto resource.
     *
     * @param  \Bankiru\PetClient\Model\UserJsonld $userJsonld The updated UserDto resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserupdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiUserupdatePutAsyncWithHttpInfo($userJsonld, string $contentType = self::contentTypes['apiUserupdatePut'][0])
    {
        $returnType = '\Bankiru\PetClient\Model\UserJsonld';
        $request = $this->apiUserupdatePutRequest($userJsonld, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiUserupdatePut'
     *
     * @param  \Bankiru\PetClient\Model\UserJsonld $userJsonld The updated UserDto resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiUserupdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiUserupdatePutRequest($userJsonld, string $contentType = self::contentTypes['apiUserupdatePut'][0])
    {

        // verify the required parameter 'userJsonld' is set
        if ($userJsonld === null || (is_array($userJsonld) && count($userJsonld) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userJsonld when calling apiUserupdatePut'
            );
        }


        $resourcePath = '/api/v2/user/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userJsonld)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userJsonld));
            } else {
                $httpBody = $userJsonld;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
